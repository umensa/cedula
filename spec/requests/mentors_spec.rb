 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/mentors", type: :request do
  
  # Mentor. As you add validations to Mentor, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  describe "GET /index" do
    it "renders a successful response" do
      mentor = FactoryBot.create(:mentor)
      get mentors_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response && renders the :show template" do
      mentor = FactoryBot.create(:mentor)
      get mentor_url(id: mentor.id)
      expect(response).to be_successful
      expect(response).to render_template(:show)
    end

    it "redirects to the index path if the mentor id is invalid" do
      get mentor_path(id: 100) #an ID that doesn't exist
      expect(response).to redirect_to sessions_path
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_mentor_url
      expect(response).to be_successful
      expect(response).to render_template(:new)
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      mentor = FactoryBot.create(:mentor)
      get edit_mentor_url(id: mentor.id)
      expect(response).to be_successful
      expect(response).to render_template(:edit)
    end
  end

  describe "POST /create" do
      it "creates a new Mentor" do
        attributes = FactoryBot.attributes_for(:mentor)
        expect {
          post mentors_path, params: { mentor: attributes }
        }.to change(Mentor, :count).by(1)
      end

      it "redirects to the created mentor" do
        attributes = FactoryBot.attributes_for(:mentor)
        post mentors_path, params: { mentor: attributes }
        expect(response).to redirect_to mentor_path(id: Mentor.last.id)
      end
  end

  describe "post mentors_path with valid data" do
    it "saves a new entry and redirects to the show path for the entry" do
      mentor_attributes = FactoryBot.attributes_for(:mentor)
      expect { post mentors_path, params: {mentor: mentor_attributes} }.to change(Mentor, :count)
      expect(response).to redirect_to mentor_path(id: Mentor.last.id)
    end
  end

  describe "post mentors_path with invalid data" do
    it "does not save a new entry or redirect" do
      mentor_attributes = FactoryBot.attributes_for(:mentor)
      mentor_attributes.delete(:mentor_name)
      expect { post mentors_path, params: {mentor: mentor_attributes} }.to_not change(Mentor, :count)
      expect(response).to render_template(:new)
    end
  end

  describe "PATCH /update" do
      it "updates the requested mentor" do
        mentor = FactoryBot.create(:mentor, mentor_name: "Bob")
        expect(mentor.mentor_name).to eql("Bob")

        patch mentor_url(mentor), params: { mentor: {mentor_name: "John"} }
        mentor.reload
        expect(mentor.mentor_name).to eql("John")
      end

      it "redirects to the mentor" do
        mentor = FactoryBot.create(:mentor, mentor_name: "Bob")
        patch mentor_url(mentor), params: { mentor: {mentor_name: "John"} }
        mentor.reload
        expect(response).to redirect_to(mentor_url(mentor))
      end

      it "renders a successful response (i.e. to display the 'edit' template)" do
        mentor = FactoryBot.create(:mentor)
        patch mentor_url(mentor), params: { mentor: {mentor_name: ""} }
        mentor.reload
        expect(response).to be_successful
        expect(mentor.mentor_name).to_not be_empty
        expect(response).to render_template(:edit)
      end
  end

  describe "delete a mentor record" do
    it "delete a mentor record" do
      mentor = FactoryBot.create(:mentor)
      expect { 
        delete mentor_path(mentor.id)
      }.to change{Mentor.count}
      expect(response).to redirect_to mentors_path
    end
  end
end
